process.container = '/path/to/nmt_dna_pipeline.sif'
singularity.cacheDir = '/scratch/path/to/singularity_cache'
singularity.autoMounts = true
singularity.enabled = true
dag.overwrite = true
tower {
	enabled = true
	accessToken = 'your token here'
}

executor {
	name = 'slurm'
	queueSize = 32
	exitReadTimeout = '60000 sec'
}

errorStrategy = { task.exitStatus in 137..141 ? 'retry' : 'ignore' }

params {
	// run FastQC or not
	run_fastqc=true

	// RNA quantification strategy
	featurecount_gene = true # scNMT
	rsem = false # snNMT
	 
	// Parameters for software
        star="--readFilesCommand zcat --outFilterScoreMinOverLread 0.3 --outFilterMatchNminOverLread 0.3 --outSAMmapqUnique 60 --outSAMunmapped Within --outReadsUnmapped Fastx --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts"
        trim_length_RNA = 36
        extra_trim_params_RNA = ''
        samtools_filter_star = '-F 4 -F 256 -q 10'
        qualimap_mem_size = '8G'
        min_reads = 0
        sample_reads_n = 100

	// Reference genome files
        genes="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/Homo_sapiens.GRCh38.bed.gz"
        genes_tbi="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/Homo_sapiens.GRCh38.bed.gz.tbi"
        promoters="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/promoters_Homo_sapiens.GRCh38.bed.gz"
        promoters_tbi="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/promoters_Homo_sapiens.GRCh38.bed.gz.tbi"
        star_index="/staging/leuven/stg_00064/Xinran/db/hg38/broadERCC_STARfiltergtf100"
        sjdbgtf="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/gencode.v38.104.comprehensive.filtered.ERCC.gtf"
        gtf_add_introns="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/gencode.v38.104.comprehensive.filtered.ERCC.add_introns.gtf"
        refflat="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/gencode.v38.104.basic.annotation.ref_flat"
        genome_folder="/staging/leuven/stg_00064/Xinran/db/hg38/broad"
        refflat_comprehensive="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/gencode.v38.104.comprehensive.filtered.ref_flat"
        ref_fasta="/staging/leuven/stg_00064/Xinran/db/hg38/broad/Homo_sapiens_assembly38.fasta"
        ref_fai="/staging/leuven/stg_00064/Xinran/db/hg38/broad/Homo_sapiens_assembly38.fasta.fai"
        chromsizes="/staging/leuven/stg_00064/Xinran/db/hg38/broad/sizes.genome"
        final_gtf="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/gencode.v38.104.basic.annotation.gtf"
        rsem_ref="/staging/leuven/stg_00064/Xinran/db/hg38/broadERCC_RSEMfiltergtf"
        junctions_bedfile="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/gencode.v38.104.comprehensive.filtered.ERCC.junctions.bed"
	kb_index="/staging/leuven/stg_00064/Xinran/db/hg38/kb_ref/index.idx"
	kb_t2g="/staging/leuven/stg_00064/Xinran/db/hg38/kb_ref/t2g.txt"
	kb_cdna_t2c="/staging/leuven/stg_00064/Xinran/db/hg38/kb_ref/cdna_t2c.txt"
	kb_intron_t2c="/staging/leuven/stg_00064/Xinran/db/hg38/kb_ref/intron_t2c.txt"
        intergenic_bedfile="/staging/leuven/stg_00064/Xinran/db/hg38/gtf/gencode.v38.104.comprehensive.filtered.intergenic.bed"
        repeat_bedfile="/staging/leuven/stg_00064/Xinran/db/hg38/repeat/UCSC_RepeatMasker_track.bed"
        
	// Adapters and primers
	adapter_primer_fa="/staging/leuven/stg_00064/Xinran/db/adapter_primer/adapter_primer.fa"
        adapter_primer_fa2="/staging/leuven/stg_00064/Xinran/db/adapter_primer/adapter_primer2.fa"
        trim_adapter_primer_fa="/staging/leuven/stg_00064/Xinran/db/adapter_primer/trim_adapter_primer.fa"

	// Software paths
	tools_path="/staging/leuven/stg_00064/Xinran/sw/miniconda3/envs/tools/bin"
	//samtools='/staging/leuven/stg_00064/Xinran/sw/SAMTOOLS/bin/samtools'
	samtools='/apps/leuven/rocky8/skylake/2022a/software/SAMtools/1.16.1-GCC-11.3.0/bin/samtools'
	qualimap='/apps/leuven/rocky8/skylake/2022b/software/Qualimap/2.3-foss-2022b-R-4.2.2/qualimap'
	picard="/apps/leuven/skylake/2018a/software/picard/2.18.23-Java-1.8.0_171/picard.jar"
	rsem="/staging/leuven/stg_00064/Huiwen/sw/RSEM/bin/rsem-calculate-expression"
	tracer="/staging/leuven/stg_00064/Xinran/sw/tracer"
	python3_path="/staging/leuven/stg_00064/Xinran/sw/miniconda3/envs/myenv/bin"
	python="/staging/leuven/stg_00064/Xinran/sw/miniconda3/envs/myenv/bin/python"
	skewer="/staging/leuven/stg_00064/Xinran/sw/skewer-0.2.2-linux-x86_64/skewer"
	java="/apps/leuven/skylake/2018a/software/Java/1.8.0_162/bin/java"
	seqtk="/apps/leuven/rocky8/skylake/2018a/software/seqtk/1.3-foss-2018a/bin/seqtk"
	blastn="/staging/leuven/stg_00064/Xinran/sw/ncbi-blast-2.15.0+/bin/blastn"
	parse_blast_xml="/staging/leuven/stg_00064/Xinran/script/NMT/RNA_upstream/parse_blast_xml.py"
	blastn_out_process="/staging/leuven/stg_00064/Xinran/script/NMT/RNA_upstream/blastn_out_process.sh"
	dbnt="/staging/leuven/stg_00064/Xinran/sw/ncbi-blast-2.15.0+/db/NT/nt"
	summary_script="/staging/leuven/stg_00064/Xinran/script/NMT/summarization/collect.RNAalign.nf.py"
	count_seq="/staging/leuven/stg_00064/Xinran/script/NMT/summarization/count_seq.sh"
	count_adapter="/staging/leuven/stg_00064/Xinran/script/NMT/summarization/count_adapter.sh"
	kb="/staging/leuven/stg_00064/Xinran/sw/miniconda3/envs/myenv/bin/kb"
	create_kb_batch="/staging/leuven/stg_00064/Xinran/script/NMT/RNA_upstream/create_kb_batch.sh"
}

process {
	publishDir.mode = 'copy'
	clusterOptions = "--cluster wice --account lp_big_wice_cpu --partition dedicated_big_bigmem"
	//clusterOptions = "--cluster wice --account lp_labepi"
	
	cpus = 2
	memory = 4.GB
	//errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
	errorStrategy = { task.exitStatus in 137..141 ? 'retry' : 'ignore' }	
	time = {'30m' * task.attempt}

	withName: 'FASTQC' {
	cpus = {4 * task.attempt}
	memory = {1.GB * task.attempt}
	time = {'10m' * task.attempt}
	}

	withName: 'COUNT_ADAPTER' {
        time = {'5m' * task.attempt}
        cpus = {1 * task.attempt}
        memory = {1.GB * task.attempt}
        }
	
	withName: 'FASTQC_TRIM' {
	cpus = {4 * task.attempt}
	memory = {1.GB * task.attempt}
        time = {'3m' * task.attempt}
	}
	
	withName: 'MULTIFASTQC' {
	cpus = {2 * task.attempt}
	memory = {5.GB * task.attempt}
	time = {'5m' * task.attempt}
	}

	withName: 'MULTIFASTQC_TRIM' {
        cpus = {2 * task.attempt}
        memory = {5.GB * task.attempt}
        time = {'5m' * task.attempt}
        }
	
	withName: 'TRIM' {
	time = {'30m' * task.attempt}
	cpus = {4 * task.attempt}
	memory = {1.GB * task.attempt}
	}
  
	withName: 'COUNT_SEQ' {
        time = {'10m' * task.attempt}
        cpus = {1 * task.attempt}
        memory = {1.GB * task.attempt}
        }
	
	withName: 'STAR_ALIGN' {
	cpus = {8 * task.attempt}
	memory = {40.GB * task.attempt}
	time = {'1h' * task.attempt}
	errorStrategy = 'terminate'
	}

	withName: 'STAR_MARKDUP' {
	cpus = {4 * task.attempt}
        memory = {10.GB * task.attempt}
        time = {'30m' * task.attempt}
	}
	withName: 'STAR_FILTER' {
	cpus = {1 * task.attempt}
	memory = {6.GB * task.attempt}
	}
	
	withName: 'QUALITY_METRICS' {
	cpus = {10 * task.attempt}
	memory = {8.GB * task.attempt}
	errorStrategy = 'terminate'
	}

	withName: 'BAMTOBED' {
	time = {'10m' * task.attempt}
        cpus = {1 * task.attempt}
        memory = {3.GB * task.attempt}
        }

	withName: 'RM_JUNCTIONAL_READS' {
	cpus = {2 * task.attempt}
	memory = {1.GB * task.attempt}
	time = {'10m' * task.attempt}
	}

	withName: 'STAR_FEATURECOUNTS' {
	cpus = {4 * task.attempt}
	memory = {1.GB * task.attempt}
        time = {'20m' * task.attempt}
	}

	withName: 'STAR_FEATURECOUNTS_INTRON' {
        cpus = {4 * task.attempt}
        memory = {1.GB * task.attempt}
        time = {'30m' * task.attempt}
        }

	withName: 'STAR_FEATURECOUNTS_GENE' {
	cpus = {4 * task.attempt}
	memory = {1.GB * task.attempt}
	time = {'15m' * task.attempt}
	}

	withName: 'KB_COUNT' {
        cpus = {8 * task.attempt}
        memory = {30.GB * task.attempt}
        time = {'3h' * task.attempt}
        }

        withName: 'RSEM' {
        cpus = {9 * task.attempt}
        memory = {2.GB * task.attempt}
        time = {'15m' * task.attempt}
        }

	withName: 'BLAST_UNMAP' {
        cpus = {32 * task.attempt}
        memory = {30.GB * task.attempt}
        time = {'2h' * task.attempt}
        }

	withName: 'BLAST_INTERGENIC' {
	cpus = {32 * task.attempt}
        memory = {30.GB * task.attempt}
        time = {'2h' * task.attempt}
        }

	withName: 'SUMMARY_STAT' {
	cpus = {16 * task.attempt}
	memory = {2.GB * task.attempt}
	time = {'5m' * task.attempt}
	errorStrategy = 'terminate'
	}
}

dag {
	enabled = false
	file = 'pipeline_dag.html'
}
